import React, { useEffect, useState, useRef, useContext } from "react";
import { useSelector } from "react-redux";
import QrScanner from "react-qr-scanner";
import { EthContext } from "../Context/EthContext";
import SummaryApi from "../common";

const COUNTDOWN_DURATION = 300;
const LOCAL_STORAGE_KEY = "ethWithdrawalCountdownEnd";
const LOCAL_STORAGE_STATUS_KEY = "ethWithdrawalStatus";
const LOCAL_STORAGE_MESSAGE_KEY = "ethWithdrawalSuccessMessage";

const EthWallet = () => {
  const { user } = useSelector((state) => state.user);
  const {
    ethRate,
    setEthRate,
    gasFee,
    setGasFee,
    nairaBalance,
    setNairaBalance,
    ethBalance,
    setEthBalance,
    fetchEthRate,
    fetchGasFee,
    fetchWalletBalance,
  } = useContext(EthContext);

  const [ethAddress, setEthAddress] = useState("");
  const [addressHistory, setAddressHistory] = useState([]);
  const [nairaWithdrawAmount, setNairaWithdrawAmount] = useState("");
  const [ethEquivalent, setEthEquivalent] = useState("0.000000");
  const [ethToSend, setEthToSend] = useState("0.000000");
  const [lastUpdated, setLastUpdated] = useState(null);
  const [loading, setLoading] = useState(true);
  const [scannerVisible, setScannerVisible] = useState(false);
  const [withdrawLoading, setWithdrawLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
  const [countdown, setCountdown] = useState(0);
  const [withdrawalStatus, setWithdrawalStatus] = useState(null);
  const countdownRef = useRef(null);
  const statusIntervalRef = useRef(null);
  
  const formatTime = (date) =>
    date.toLocaleTimeString([], {
      hour12: false,
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
      timeZoneName: "short",
    });

  const refreshWalletData = async () => {
    setLoading(true);
    setErrorMessage("");
    try {
      await fetchEthRate();
      await fetchWalletBalance(user._id || user.id);
      setLastUpdated(formatTime(new Date()));
    } catch (error) {
      console.error("refreshWalletData error:", error);
      setErrorMessage("Unable to load wallet data. Please try again later.");
    } finally {
      setLoading(false);
    }
  };

  const refreshGasFee = async () => {
    try {
      await fetchGasFee();
    } catch (error) {
      console.error("refreshGasFee error:", error);
    }
  };

  const resetLocalStorageIfNoRequests = async () => {
    try {
      const res = await fetch(`${SummaryApi.withdrawalStatus.url}`, {
        method: "GET",
        credentials: "include",
      });
      const data = await res.json();

      if (res.ok && (!data.status || data.status === "")) {
        localStorage.removeItem(LOCAL_STORAGE_KEY);
        localStorage.removeItem(LOCAL_STORAGE_STATUS_KEY);
        localStorage.removeItem(LOCAL_STORAGE_MESSAGE_KEY);
        setCountdown(0);
        setWithdrawalStatus(null);
        setSuccessMessage("");
      }
    } catch (err) {
      console.error("Error checking withdrawal reset status:", err);
    }
  };

  useEffect(() => {
    const storedEndTimestamp = localStorage.getItem(LOCAL_STORAGE_KEY);
    const storedStatus = localStorage.getItem(LOCAL_STORAGE_STATUS_KEY);
    const storedMessage = localStorage.getItem(LOCAL_STORAGE_MESSAGE_KEY);

    if (storedEndTimestamp) {
      const endTime = parseInt(storedEndTimestamp, 10);
      const now = Date.now();
      if (endTime > now) {
        const remainingSeconds = Math.floor((endTime - now) / 1000);
        setCountdown(remainingSeconds);
      } else {
        localStorage.removeItem(LOCAL_STORAGE_KEY);
      }
    }

    if (storedStatus) {
      setWithdrawalStatus(storedStatus);
    }

    if (storedMessage) {
      setSuccessMessage(storedMessage);
    }

    refreshWalletData();
    refreshGasFee();
    resetLocalStorageIfNoRequests();

    // Always check latest withdrawal status on mount
const checkInitialWithdrawalStatus = async () => {
  try {
    const res = await fetch(`${SummaryApi.withdrawalStatus.url}`, {
      method: "GET",
      credentials: "include",
    });
    const data = await res.json();

    if (res.ok && data.status) {
      const normalizedStatus = data.status.toLowerCase();

      if (["paid", "processed"].includes(normalizedStatus)) {
        setWithdrawalStatus("paid");
        setSuccessMessage(`Transaction Successful! Your last withdrawal is ${normalizedStatus}.`);
        localStorage.setItem(LOCAL_STORAGE_STATUS_KEY, "paid");
        localStorage.setItem(
          LOCAL_STORAGE_MESSAGE_KEY,
          `Transaction Successful! Your last withdrawal is ${normalizedStatus}.`
        );
        setCountdown(0);
        localStorage.removeItem(LOCAL_STORAGE_KEY);
      } else if (normalizedStatus === "pending") {
        setWithdrawalStatus("pending");
        localStorage.setItem(LOCAL_STORAGE_STATUS_KEY, "pending");
      } else if (normalizedStatus === "rejected") {
        setWithdrawalStatus("rejected");
        localStorage.setItem(LOCAL_STORAGE_STATUS_KEY, "rejected");
        localStorage.removeItem(LOCAL_STORAGE_MESSAGE_KEY);
        setSuccessMessage("");
      } else {
        setWithdrawalStatus(normalizedStatus);
      }
    }
  } catch (err) {
    console.error("Error checking initial withdrawal status:", err);
  }
};

checkInitialWithdrawalStatus();


    const interval = setInterval(refreshWalletData, 60000);
    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    if (countdown > 0) {
      countdownRef.current = setInterval(() => {
        setCountdown((prev) => {
          if (prev <= 1) {
            clearInterval(countdownRef.current);
            return 0;
          }
          return prev - 1;
        });
      }, 1000);

      statusIntervalRef.current = setInterval(async () => {
        try {
          const res = await fetch(`${SummaryApi.withdrawalStatus.url}`, {
            method: "GET",
            credentials: "include",
          });
          const data = await res.json();
          if (res.ok && data.status) {
            const normalizedStatus = data.status.toLowerCase();
            if (["paid", "processed"].includes(normalizedStatus)) {
              setWithdrawalStatus("paid");
              setSuccessMessage(
                `Transaction Successful! Your withdrawal is ${normalizedStatus}.`
              );
              localStorage.setItem(LOCAL_STORAGE_STATUS_KEY, "paid");
              localStorage.setItem(
                LOCAL_STORAGE_MESSAGE_KEY,
                `Transaction Successful! Your withdrawal is ${normalizedStatus}.`
              );
              setCountdown(0);
              localStorage.removeItem(LOCAL_STORAGE_KEY);
              clearInterval(countdownRef.current);
              clearInterval(statusIntervalRef.current);
            } else if (normalizedStatus === "pending") {
              setWithdrawalStatus("pending");
              localStorage.setItem(LOCAL_STORAGE_STATUS_KEY, "pending");
            } else if (normalizedStatus === "rejected") {
              setWithdrawalStatus("rejected");
              setSuccessMessage("");
              localStorage.setItem(LOCAL_STORAGE_STATUS_KEY, "rejected");
              localStorage.removeItem(LOCAL_STORAGE_MESSAGE_KEY);
            } else {
              setWithdrawalStatus(normalizedStatus);
            }
          }
        } catch (err) {
          console.error("Failed to fetch withdrawal status");
        }
      }, 3000);

      return () => {
        clearInterval(countdownRef.current);
        clearInterval(statusIntervalRef.current);
      };
    }
  }, [countdown]);

  useEffect(() => {
    const stored = JSON.parse(localStorage.getItem("eth_addresses") || "[]");
    const userSpecific = stored.filter((addr) => addr.userId === user._id || addr.userId === user.id);
    setAddressHistory(userSpecific.map(a => a.address));
  }, [user]);

  useEffect(() => {
    const naira = parseFloat(nairaWithdrawAmount);
    const rate = parseFloat(ethRate);
    const fee = parseFloat(gasFee);

    if (naira > 0 && rate > 0) {
      const ethAmount = naira / rate;
      const ethAfterFee = ethAmount - fee;
      setEthEquivalent(ethAmount.toFixed(6));
      setEthToSend(ethAfterFee > 0 ? ethAfterFee.toFixed(6) : "0.000000");
    } else {
      setEthEquivalent("0.000000");
      setEthToSend("0.000000");
    }
  }, [nairaWithdrawAmount, ethRate, gasFee]);

  const handleWithdrawRequest = async () => {
    setErrorMessage("");
    setSuccessMessage("");

    if (withdrawalStatus === "pending") {
      setErrorMessage("A previous withdrawal is still pending. Please wait.");
      return;
    }

    if (
      !ethAddress.trim() ||
      !nairaWithdrawAmount ||
      isNaN(nairaWithdrawAmount) ||
      parseFloat(nairaWithdrawAmount) <= 0
    ) {
      setErrorMessage("Please enter a valid ETH address and amount.");
      return;
    }

    setWithdrawLoading(true);
    try {
      const payload = {
        ethRecipientAddress: ethAddress,
        nairaRequestedAmount: parseFloat(nairaWithdrawAmount),
        ethNetAmountToSend: parseFloat(ethToSend),
      };

      const res = await fetch(SummaryApi.ethWithdrawal.url, {
        method: "POST",
        credentials: "include",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });

      const data = await res.json();
      if (!res.ok) throw new Error(data.message || "Withdrawal failed.");

      setSuccessMessage("Withdrawal submitted and processing.");
      setWithdrawalStatus("pending");

      const countdownEnd = Date.now() + COUNTDOWN_DURATION * 1000;
      localStorage.setItem(LOCAL_STORAGE_KEY, countdownEnd.toString());
      localStorage.setItem(LOCAL_STORAGE_STATUS_KEY, "pending");
      localStorage.setItem(
        LOCAL_STORAGE_MESSAGE_KEY,
        "Withdrawal submitted and processing."
      );
      setCountdown(COUNTDOWN_DURATION);

      const updatedHistory = [
        { userId: user._id || user.id, address: ethAddress },
        ...addressHistory
          .filter((addr) => addr !== ethAddress)
          .map((a) => ({ userId: user._id || user.id, address: a }))
      ].slice(0, 5);

      setAddressHistory(updatedHistory.map(a => a.address));
      localStorage.setItem("eth_addresses", JSON.stringify(updatedHistory));
    } catch (error) {
      console.error("Withdrawal error:", error);
      setErrorMessage(error.message || "Error submitting withdrawal.");
    } finally {
      setWithdrawLoading(false);
    }
  };

  const handleScan = (data) => {
    if (data) {
      setEthAddress(data.text);
      setScannerVisible(false);
    }
  };

  const handleError = (err) => {
    console.error(err);
  };

  const renderCountdown = () => {
    if (countdown <= 0) return null;
    const mins = Math.floor(countdown / 60);
    const secs = countdown % 60;
    return (
      <div className="mt-3 text-yellow-600 font-semibold">
        Processing: {mins}m {secs}s
      </div>
    );
  };

  return (
    <div className="max-w-xl mx-auto p-6 mt-20 bg-white rounded-lg shadow-md border border-gray-200">
      <h2 className="text-2xl font-bold mb-4">ETH Wallet</h2>
 <div className="mb-8 text-sm text-gray-700 space-y-3 bg-white p-5 rounded-lg shadow-sm border border-gray-200">
  {loading ? (
    <p className="italic text-gray-500">Loading balances...</p>
  ) : (
    <>
      <div className="flex items-center justify-between">
        <span className="font-medium">Naira Balance:</span>
        <span className="text-green-600 font-semibold">₦{nairaBalance?.toLocaleString() || "0.00"}</span>
      </div>

      <div className="flex items-center justify-between">
        <span className="font-medium">ETH Balance:</span>
        <span className="text-green-600 font-semibold">
          {ethBalance != null && !isNaN(ethBalance) ? Number(ethBalance).toFixed(6) : "..."}
        </span>
      </div>

      <div className="flex items-center justify-between">
        <span className="font-medium">ETH Rate:</span>
        <span className="text-gray-900">₦{ethRate?.toLocaleString() || "..."}</span>
      </div>

      <div className="flex items-center justify-between">
        <span className="font-medium">Gas Fee:</span>
        <span className="text-gray-900">{gasFee ?? "..."} ETH</span>
      </div>

      <div className="flex items-center justify-between">
        <span className="font-medium">Last Updated:</span>
        <span className="text-gray-500">{lastUpdated || "..."}</span>
      </div>
    </>
  )}
</div>


            <div className="mb-4">
  <label htmlFor="ethAddress" className="block font-medium text-gray-700 mb-2">
    ETH Address:
  </label>

  {/* Input + Select */}
  <div className="flex flex-col md:flex-row md:items-center gap-3">
    <input
      type="text"
      id="ethAddress"
      value={ethAddress}
      onChange={(e) => setEthAddress(e.target.value)}
      placeholder="Enter your ETH address"
      className="flex-1 px-4 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
    />
    
    {addressHistory.length > 0 && (
      <select
        onChange={(e) => setEthAddress(e.target.value)}
        defaultValue=""
        className="w-full md:w-60 px-3 py-2 border text-sm rounded-md bg-white shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
      >
        <option value="" disabled>
          Recent Addresses
        </option>
        {addressHistory.map((addr, i) => (
          <option key={i} value={addr}>
            {addr}
          </option>
        ))}
      </select>
    )}
  </div>

  {/* QR Button */}
  <button
    type="button"
    onClick={() => setScannerVisible(!scannerVisible)}
    className="mt-3 inline-block px-5 py-2.5 bg-blue-600 text-white text-sm rounded-md hover:bg-blue-700 transition duration-200 shadow"
  >
    {scannerVisible ? "Close Scanner" : "Scan QR"}
  </button>

  {/* QR Scanner */}
  {scannerVisible && (
    <div className="mt-4 border rounded-md overflow-hidden shadow-sm">
      <QrScanner
        delay={500}
        onError={handleError}
        onScan={handleScan}
        style={{ width: "100%" }}
      />
    </div>
  )}
</div>

      <div className="mb-4">
        <label className="block font-semibold mb-1" htmlFor="nairaAmount">
          Amount to Withdraw (₦)
        </label>
        <input
          type="number"
          id="nairaAmount"
          value={nairaWithdrawAmount}
          onChange={(e) => setNairaWithdrawAmount(e.target.value)}
          placeholder="Enter amount in Naira"
          className="w-full border rounded px-3 py-2"
          disabled={withdrawalStatus === "pending"}
          min="1"
          step="any"
        />
      </div>

      <div className="mb-4 text-gray-700">
        <p>
          ETH Equivalent: <span className="font-semibold">{ethEquivalent}</span>
        </p>
        <p>
          Gas Fee: <span className="font-semibold">{gasFee}</span> ETH
        </p>
        <p>
          ETH to Recieve: <span className="font-semibold">{ethToSend}</span>
        </p>
      </div>

      {withdrawalStatus === "rejected" && (
  <div className="mb-6 p-4 border border-red-300 bg-red-50 rounded-md text-red-700 text-sm flex flex-col md:flex-row md:items-center justify-between gap-4">
    <span>
      Your last pending transaction has been <strong>rejected</strong>. Please try again or contact support.
    </span>
    <a
      href="/report"
      className="px-4 py-2 text-white bg-red-600 rounded-md hover:bg-red-700 transition text-sm whitespace-nowrap"
    >
      Contact Support
    </a>
  </div>
)}
{errorMessage && (
        <div className="mb-4 text-red-600 font-semibold">{errorMessage}</div>
      )}

      {successMessage && (
        <div className="mb-4 text-green-600 font-semibold">{successMessage}</div>
      )}

      {withdrawalStatus === "pending" && (
        <div className="mb-4 text-yellow-700 font-semibold">
          Your withdrawal request is pending. You cannot make another withdrawal until it is processed.
        </div>
      )}

      {renderCountdown()}

      <button
        onClick={handleWithdrawRequest}
        disabled={withdrawLoading || withdrawalStatus === "pending"}
        className={`w-full py-3 text-white font-bold rounded ${
          withdrawalStatus === "pending" || withdrawLoading
            ? "bg-gray-400 cursor-not-allowed"
            : "bg-blue-600 hover:bg-blue-700"
        }`}
      >
        {withdrawLoading ? "Processing..." : "Withdraw"}
      </button>

      <div className="mt-4 text-sm text-gray-500">
        Last updated: {lastUpdated || "Loading..."}
      </div>
    </div>
  );
};

export default EthWallet;