import { useContext, useState, useMemo, useCallback, useEffect, useRef } from "react";
import { FcSearch } from "react-icons/fc";
import { Link, useLocation, useNavigate } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import { toast } from "react-toastify";
import { setUserDetails } from "../store/userSlice";
import Context from "../Context";
import { useSound } from "../Context/SoundContext";
import { useDebounce } from "../hooks/useDebounce";
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { 
    faBars, 
    faSignOutAlt, 
    faVolumeUp, 
    faVolumeMute,
    faSearch,
    faTimes
} from '@fortawesome/free-solid-svg-icons';
import { PiBell } from 'react-icons/pi';
import notificationSound from '../Assets/notification.mp3';
import SummaryApi from "../common";
import { BiSearch } from 'react-icons/bi';
import SidePanel from "./SidePanel";
import './Header.css';
import './Pop.css';

const Header = () => {
    const dispatch = useDispatch();
    const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
    const [searchFocused, setSearchFocused] = useState(false);
    const [loading, setLoading] = useState(false);
    const { user } = useSelector((state) => state.user);
    const { soundEnabled, toggleSound } = useSound();
    const { token } = useContext(Context);
    const navigate = useNavigate();
    const searchInput = useLocation();
    const [unreadNotificationCount, setUnreadNotificationCount] = useState(0);
    const [showPopup, setShowPopup] = useState(false);
    const [popupMessage, setPopupMessage] = useState('');
    const [animateNotification, setAnimateNotification] = useState(false);
    const [scrolled, setScrolled] = useState(false);
    const audioRef = useRef(null);
    
    const searchQuery = useMemo(() => {
        const URLSearch = new URLSearchParams(searchInput.search);
        return URLSearch.get("q") || "";
    }, [searchInput]);
    
    const [search, setSearch] = useState(searchQuery);
    const debouncedSearch = useDebounce(search, 300);

    // Handle scroll effect for header
    useEffect(() => {
        const handleScroll = () => {
            const isScrolled = window.scrollY > 20;
            setScrolled(isScrolled);
        };

        window.addEventListener('scroll', handleScroll);
        return () => window.removeEventListener('scroll', handleScroll);
    }, []);

    const playNotificationSound = () => {
        if (soundEnabled && audioRef.current) {
            audioRef.current.currentTime = 0;
            audioRef.current.play().catch(err => {
                console.warn("Notification sound failed:", err);
            });
        }
    };

    const triggerVibration = () => {
        if (navigator.vibrate) {
            navigator.vibrate([100, 50, 100]);
        }
    };

    const truncateWords = (text, limit) => {
        const words = text.split(/\s+/);
        if (words.length > limit) {
            return {
                truncated: words.slice(0, limit).join(' ') + '...',
                original: text,
                isTruncated: true,
            };
        }
        return {
            truncated: text,
            original: text,
            isTruncated: false,
        };
    };

    const fetchUnreadCount = useCallback(async () => {
        if (user?._id) {
            try {
                const response = await fetch(SummaryApi.notificationCount.url, {
                    credentials: 'include',
                    headers: { 'Content-Type': 'application/json' },
                });
                const data = await response.json();
                if (data.success) {
                    setUnreadNotificationCount(data.count);
                }
            } catch (error) {
                console.error("❌ Error fetching unread count:", error);
            }
        }
    }, [user?._id]);

    const fetchNewNotifications = useCallback(async () => {
        if (user?._id) {
            try {
                const response = await fetch(SummaryApi.getNewNotifications.url, {
                    credentials: 'include',
                    headers: { 'Content-Type': 'application/json' }
                });
                const data = await response.json();
                if (data.success && Array.isArray(data.newNotifications)) {
                    const latest = data.newNotifications[0];
                    const lastShownId = localStorage.getItem('lastNotifiedId');
                    if (latest && latest._id !== lastShownId) {
                        localStorage.setItem('lastNotifiedId', latest._id);
                        setPopupMessage(latest.message || "New notification received!");
                        setShowPopup(true);
                        setAnimateNotification(true);
                        playNotificationSound();
                        triggerVibration();
                        setTimeout(() => setAnimateNotification(false), 2000);
                        setTimeout(() => setShowPopup(false), 4000);
                    }
                }
            } catch (error) {
                console.error("❌ Error fetching new notifications:", error);
            }
        }
    }, [user?._id, playNotificationSound, triggerVibration]);

    useEffect(() => {
        if (debouncedSearch.trim()) {
            navigate(`/search?q=${encodeURIComponent(debouncedSearch)}`);
        }
    }, [debouncedSearch, navigate]);

    useEffect(() => {
        fetchUnreadCount();
        fetchNewNotifications();
        const unreadCountIntervalId = setInterval(fetchUnreadCount, 10000);
        const newNotificationsIntervalId = setInterval(fetchNewNotifications, 10000);
        return () => {
            clearInterval(unreadCountIntervalId);
            clearInterval(newNotificationsIntervalId);
        };
    }, [fetchUnreadCount, fetchNewNotifications]);

    const handleLogout = useCallback(async () => {
        setLoading(true);
        try {
            const response = await fetch(SummaryApi.logout_user.url, {
                method: SummaryApi.logout_user.method,
                credentials: "include",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`,
                },
            });
            const data = await response.json();
            if (data.success) {
                toast.success(data.message);
                dispatch(setUserDetails(null));
                navigate("/");
            } else {
                toast.error(data.message);
            }
        } catch (error) {
            toast.error("Logout failed. Please try again.");
        } finally {
            setLoading(false);
        }
    }, [dispatch, navigate, token]);

    const toggleMobileMenu = useCallback(() => setMobileMenuOpen((prev) => !prev), []);
    const closeMobileMenu = useCallback(() => setMobileMenuOpen(false), []);
    const truncatedMessage = useMemo(() => truncateWords(popupMessage, 10), [popupMessage]);

    const clearSearch = () => {
        setSearch('');
    };

    return (
        <>
            <header className={`header-spa ${scrolled ? 'scrolled' : ''}`}>
                <div className="header-container">
                    {/* Left Section */}
                    <div className="header-left">
                        <button
                            onClick={toggleMobileMenu}
                            className="mobile-menu-btn lg:hidden"
                            aria-expanded={mobileMenuOpen}
                            aria-label="Toggle mobile menu"
                        >
                            <FontAwesomeIcon 
                                icon={mobileMenuOpen ? faTimes : faBars} 
                                className="menu-icon" 
                            />
                        </button>

                        <Link to="/home" className="logo-container">
                            <div className="logo-wrapper">
                                <h1 className="logo-text">SXN</h1>
                                <div className="logo-accent"></div>
                            </div>
                        </Link>
                    </div>

                    {/* Center Section - Search */}
                    <div className="header-center">
                        <div className={`search-container ${searchFocused ? 'focused' : ''}`}>
                            <div className="search-icon-wrapper">
                                <FontAwesomeIcon icon={faSearch} className="search-icon" />
                            </div>
                            <input
                                type="text"
                                placeholder="Search gift cards, deals, offers..."
                                className="search-input"
                                value={search}
                                onChange={(e) => setSearch(e.target.value)}
                                onFocus={() => setSearchFocused(true)}
                                onBlur={() => setSearchFocused(false)}
                            />
                            {search && (
                                <button
                                    onClick={clearSearch}
                                    className="search-clear-btn"
                                    aria-label="Clear search"
                                >
                                    <FontAwesomeIcon icon={faTimes} />
                                </button>
                            )}
                        </div>
                    </div>




                    {/* Right Section */}
                    <div className="header-right">

                        {/* Desktop Navigation */}
                        <nav className="desktop-nav">
                            <Link to="/record" className="nav-btn nav-btn-primary">
                                <span className="nav-btn-text">Trade Status</span>
                            </Link>

                            <Link to="/datapad" className="nav-btn nav-btn-secondary">
                                <span className="nav-btn-text">DataPad</span>
                            </Link>

                            <Link to="/notifications" className="notification-btn">
                                <PiBell className={`notification-icon ${animateNotification ? 'animate' : ''}`} />
                                {unreadNotificationCount > 0 && (
                                    <span className="notification-badge">
                                        {unreadNotificationCount > 99 ? '99+' : unreadNotificationCount}
                                    </span>
                                )}
                            </Link>

                            <button
                                onClick={toggleSound}
                                className="sound-btn"
                                title={soundEnabled ? "Disable Sound" : "Enable Sound"}
                                aria-label={soundEnabled ? "Disable Sound" : "Enable Sound"}
                            >
                                <FontAwesomeIcon 
                                    icon={soundEnabled ? faVolumeUp : faVolumeMute} 
                                    className="sound-icon" 
                                />
                            </button>

                            {user?._id && (
                                <button
                                    onClick={handleLogout}
                                    disabled={loading}
                                    className="logout-btn"
                                    aria-label="Logout"
                                >
                                    <FontAwesomeIcon icon={faSignOutAlt} className="logout-icon" />
                                    <span className="logout-text">
                                        {loading ? 'Logging out...' : 'Logout'}
                                    </span>
                                </button>
                            )}
                        </nav>

                        {/* Mobile Actions */}
                        <div className="mobile-actions lg:hidden">
                            <Link to="/notifications" className="mobile-notification-btn">
                                <PiBell className={`mobile-notification-icon ${animateNotification ? 'animate' : ''}`} />
                                {unreadNotificationCount > 0 && (
                                    <span className="mobile-notification-badge">
                                        {unreadNotificationCount > 9 ? '9+' : unreadNotificationCount}
                                    </span>
                                )}
                            </Link>

                            <button
                                onClick={toggleSound}
                                className="mobile-sound-btn"
                                title={soundEnabled ? "Disable Sound" : "Enable Sound"}
                                aria-label={soundEnabled ? "Disable Sound" : "Enable Sound"}
                            >
                                <FontAwesomeIcon 
                                    icon={soundEnabled ? faVolumeUp : faVolumeMute} 
                                    className="mobile-sound-icon" 
                                />
                            </button>
                        </div>
                    </div>
                </div>

                {/* Enhanced Notification Popup */}
                {showPopup && (
                    <div className="notification-popup">
                        <div className="notification-popup-content">
                            <div className="notification-popup-icon">
                                <PiBell />
                            </div>
                            <div className="notification-popup-text">
                                <p className="notification-popup-message">{truncatedMessage.truncated}</p>
                                {truncatedMessage.isTruncated && (
                                    <Link to="/notifications" className="notification-popup-link">
                                        View Details
                                    </Link>
                                )}
                            </div>
                            <button
                                onClick={() => setShowPopup(false)}
                                className="notification-popup-close"
                                aria-label="Close notification"
                            >
                                <FontAwesomeIcon icon={faTimes} />
                            </button>
                        </div>
                    </div>
                )}

                <audio ref={audioRef} src={notificationSound} preload="auto" />
            </header>

            <SidePanel
                open={mobileMenuOpen}
                setOpen={setMobileMenuOpen}
                handleLogout={handleLogout}
                loading={loading}
                onCloseMenu={closeMobileMenu}
            />
        </>
    );
};

export default Header;




/* Enhanced Header Styles */
.header-spa {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 1000;
    background: rgba(0, 0, 0, 0.85);
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    height: 80px;
    padding: 0;
}

.header-spa.scrolled {
    background: rgba(0, 0, 0, 0.95);
    border-bottom: 1px solid rgba(255, 255, 255, 0.2);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
}

.header-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 1.5rem;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 2rem;
}

/* Left Section */
.header-left {
    display: flex;
    align-items: center;
    gap: 1rem;
    min-width: 0;
}

.mobile-menu-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 44px;
    height: 44px;
    border: none;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    color: #ffffff;
    cursor: pointer;
    transition: all 0.2s ease;
    backdrop-filter: blur(10px);
}

.mobile-menu-btn:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: translateY(-1px);
}

.mobile-menu-btn:active {
    transform: translateY(0);
}

.menu-icon {
    font-size: 18px;
    transition: transform 0.2s ease;
}

.logo-container {
    text-decoration: none;
    display: flex;
    align-items: center;
}

.logo-wrapper {
    position: relative;
    padding: 0.5rem 1rem;
}

.logo-text {
    font-size: 2rem;
    font-weight: 800;
    margin: 0;
    background: linear-gradient(135deg, #00f5ff, #ff00ff, #ffff00);
    background-size: 300% 300%;
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    animation: gradientShift 3s ease-in-out infinite;
    letter-spacing: 0.1em;
    filter: drop-shadow(0 0 10px rgba(0, 245, 255, 0.3));
}

.logo-accent {
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 30px;
    height: 2px;
    background: linear-gradient(90deg, transparent, #00f5ff, transparent);
    animation: pulse 2s ease-in-out infinite;
}

/* Center Section - Search */
.header-center {
    flex: 1;
    max-width: 600px;
    display: flex;
    justify-content: center;
}

.search-container {
    position: relative;
    width: 100%;
    max-width: 500px;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 16px;
    backdrop-filter: blur(10px);
    transition: all 0.3s ease;
    overflow: hidden;
}

.search-container.focused {
    background: rgba(255, 255, 255, 0.15);
    border-color: rgba(0, 245, 255, 0.5);
    box-shadow: 0 0 20px rgba(0, 245, 255, 0.2);
    transform: translateY(-1px);
}

.search-icon-wrapper {
    position: absolute;
    left: 16px;
    top: 50%;
    transform: translateY(-50%);
    z-index: 1;
}

.search-icon {
    color: rgba(255, 255, 255, 0.6);
    font-size: 16px;
    transition: color 0.3s ease;
}

.search-container.focused .search-icon {
    color: #00f5ff;
}

.search-input {
    width: 100%;
    padding: 14px 50px 14px 50px;
    background: transparent;
    border: none;
    outline: none;
    color: #ffffff;
    font-size: 14px;
    font-weight: 400;
    letter-spacing: 0.02em;
}

.search-input::placeholder {
    color: rgba(255, 255, 255, 0.5);
    font-weight: 300;
}

.search-clear-btn {
    position: absolute;
    right: 12px;
    top: 50%;
    transform: translateY(-50%);
    width: 28px;
    height: 28px;
    border: none;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 50%;
    color: rgba(255, 255, 255, 0.6);
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
}

.search-clear-btn:hover {
    background: rgba(255, 255, 255, 0.2);
    color: #ffffff;
}

/* Right Section */
.header-right {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    min-width: 0;
}

.desktop-nav {
    display: none;
    align-items: center;
    gap: 0.75rem;
}

@media (min-width: 1024px) {
    .desktop-nav {
        display: flex;
    }
}

/* Navigation Buttons */
.nav-btn {
    display: flex;
    align-items: center;
    padding: 10px 16px;
    border-radius: 10px;
    text-decoration: none;
    font-size: 13px;
    font-weight: 500;
    transition: all 0.2s ease;
    position: relative;
    overflow: hidden;
}

.nav-btn-primary {
    background: rgba(0, 245, 255, 0.1);
    border: 1px solid rgba(0, 245, 255, 0.3);
    color: #00f5ff;
}

.nav-btn-primary:hover {
    background: rgba(0, 245, 255, 0.2);
    border-color: rgba(0, 245, 255, 0.5);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 245, 255, 0.2);
}

.nav-btn-secondary {
    background: rgba(255, 255, 0, 0.1);
    border: 1px solid rgba(255, 255, 0, 0.3);
    color: #ffff00;
}

.nav-btn-secondary:hover {
    background: rgba(255, 255, 0, 0.2);
    border-color: rgba(255, 255, 0, 0.5);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(255, 255, 0, 0.2);
}

.nav-btn-text {
    white-space: nowrap;
}

/* Notification Button */
.notification-btn {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 44px;
    height: 44px;
    border: none;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    color: #ffffff;
    cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
}

.notification-btn:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: translateY(-1px);
}

.notification-icon {
    font-size: 20px;
    transition: all 0.3s ease;
}

.notification-icon.animate {
    animation: notificationPulse 1s ease-in-out infinite;
}

.notification-badge {
    position: absolute;
    top: -2px;
    right: -2px;
    background: linear-gradient(135deg, #ff4757, #ff3742);
    color: white;
    font-size: 10px;
    font-weight: 600;
    padding: 2px 6px;
    border-radius: 10px;
    min-width: 18px;
    height: 18px;
    display: flex;
    align-items: center;
    justify-content: center;
    border: 2px solid rgba(0, 0, 0, 0.8);
    box-shadow: 0 2px 8px rgba(255, 71, 87, 0.4);
}

/* Sound Button */
.sound-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 44px;
    height: 44px;
    border: none;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    color: #ffffff;
    cursor: pointer;
    transition: all 0.2s ease;
}

.sound-btn:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: translateY(-1px);
}

.sound-icon {
    font-size: 16px;
}

/* Logout Button */
.logout-btn {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 10px 16px;
    border: 1px solid rgba(255, 71, 87, 0.3);
    background: rgba(255, 71, 87, 0.1);
    border-radius: 10px;
    color: #ff4757;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 13px;
    font-weight: 500;
}

.logout-btn:hover:not(:disabled) {
    background: rgba(255, 71, 87, 0.2);
    border-color: rgba(255, 71, 87, 0.5);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(255, 71, 87, 0.2);
}

.logout-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
}

.logout-icon {
    font-size: 14px;
}

.logout-text {
    white-space: nowrap;
}

/* Mobile Actions */
.mobile-actions {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.mobile-notification-btn {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 44px;
    height: 44px;
    border: none;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    color: #ffffff;
    cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
}

.mobile-notification-btn:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: translateY(-1px);
}

.mobile-notification-icon {
    font-size: 20px;
    transition: all 0.3s ease;
}

.mobile-notification-icon.animate {
    animation: notificationPulse 1s ease-in-out infinite;
}

.mobile-notification-badge {
    position: absolute;
    top: -2px;
    right: -2px;
    background: linear-gradient(135deg, #ff4757, #ff3742);
    color: white;
    font-size: 10px;
    font-weight: 600;
    padding: 2px 5px;
    border-radius: 8px;
    min-width: 16px;
    height: 16px;
    display: flex;
    align-items: center;
    justify-content: center;
    border: 2px solid rgba(0, 0, 0, 0.8);
}

.mobile-sound-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 44px;
    height: 44px;
    border: none;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    color: #ffffff;
    cursor: pointer;
    transition: all 0.2s ease;
}

.mobile-sound-btn:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: translateY(-1px);
}

.mobile-sound-icon {
    font-size: 16px;
}

/* Enhanced Notification Popup */
.notification-popup {
    position: fixed;
    top: 90px;
    right: 1.5rem;
    left: 1.5rem;
    z-index: 1100;
    animation: slideInDown 0.3s ease-out;
}

@media (min-width: 640px) {
    .notification-popup {
        left: auto;
        width: 400px;
    }
}

.notification-popup-content {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(20px);
    border-radius: 16px;
    padding: 1rem;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
    border: 1px solid rgba(255, 255, 255, 0.3);
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
}

.notification-popup-icon {
    flex-shrink: 0;
    width: 40px;
    height: 40px;
    background: linear-gradient(135deg, #00f5ff, #0066ff);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 18px;
}

.notification-popup-text {
    flex: 1;
    min-width: 0;
}

.notification-popup-message {
    margin: 0 0 0.5rem 0;
    color: #1a1a1a;
    font-size: 14px;
    font-weight: 500;
    line-height: 1.4;
}

.notification-popup-link {
    color: #0066ff;
    text-decoration: none;
    font-size: 12px;
    font-weight: 500;
    transition: color 0.2s ease;
}

.notification-popup-link:hover {
    color: #0052cc;
    text-decoration: underline;
}

.notification-popup-close {
    flex-shrink: 0;
    width: 24px;
    height: 24px;
    border: none;
    background: rgba(0, 0, 0, 0.1);
    border-radius: 50%;
    color: #666;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
}

.notification-popup-close:hover {
    background: rgba(0, 0, 0, 0.2);
    color: #333;
}

/* Animations */
@keyframes gradientShift {
    0%, 100% {
        background-position: 0% 50%;
    }
    50% {
        background-position: 100% 50%;
    }
}

@keyframes pulse {
    0%, 100% {
        opacity: 0.6;
        transform: translateX(-50%) scaleX(1);
    }
    50% {
        opacity: 1;
        transform: translateX(-50%) scaleX(1.2);
    }
}

@keyframes notificationPulse {
    0%, 100% {
        transform: scale(1);
    }
    50% {
        transform: scale(1.1);
    }
}

@keyframes slideInDown {
    from {
        opacity: 0;
        transform: translateY(-20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Responsive Design */
@media (max-width: 1023px) {
    .header-container {
        padding: 0 1rem;
        gap: 1rem;
    }
    
    .header-center {
        order: 3;
        width: 100%;
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        padding: 1rem;
        background: rgba(0, 0, 0, 0.95);
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        transform: translateY(-100%);
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s ease;
    }
    
    .header-center.mobile-search-open {
        transform: translateY(0);
        opacity: 1;
        visibility: visible;
    }
    
    .search-container {
        max-width: none;
    }
}

@media (max-width: 640px) {
    .header-spa {
        height: 70px;
    }
    
    .header-container {
        padding: 0 0.75rem;
    }
    
    .logo-text {
        font-size: 1.75rem;
    }
    
    .mobile-menu-btn,
    .mobile-notification-btn,
    .mobile-sound-btn {
        width: 40px;
        height: 40px;
    }
    
    .notification-popup {
        top: 80px;
        right: 0.75rem;
        left: 0.75rem;
    }
}

/* High contrast mode support */
@media (prefers-contrast: high) {
    .header-spa {
        background: #000000;
        border-bottom: 2px solid #ffffff;
    }
    
    .search-container {
        background: #000000;
        border: 2px solid #ffffff;
    }
    
    .nav-btn,
    .notification-btn,
    .sound-btn,
    .mobile-notification-btn,
    .mobile-sound-btn {
        background: #000000;
        border: 2px solid #ffffff;
    }
}

/* Reduced motion support */
@media (prefers-reduced-motion: reduce) {
    * {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
    }
    
    .logo-text {
        animation: none;
        background: #00f5ff;
        background-clip: text;
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }
    
    .logo-accent {
        animation: none;
        opacity: 0.8;
    }
}

/* Focus styles for accessibility */
.mobile-menu-btn:focus,
.search-input:focus,
.nav-btn:focus,
.notification-btn:focus,
.sound-btn:focus,
.logout-btn:focus,
.mobile-notification-btn:focus,
.mobile-sound-btn:focus,
.search-clear-btn:focus,
.notification-popup-close:focus {
    outline: 2px solid #00f5ff;
    outline-offset: 2px;
}

/* Loading state */
.logout-btn:disabled {
    position: relative;
    overflow: hidden;
}

.logout-btn:disabled::after {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    animation: shimmer 1.5s infinite;
}

@keyframes shimmer {
    0% {
        left: -100%;
    }
    100% {
        left: 100%;
    }
}

/* Glassmorphism enhancements */
.header-spa::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, 
        rgba(255, 255, 255, 0.1) 0%, 
        rgba(255, 255, 255, 0.05) 50%, 
        rgba(255, 255, 255, 0.1) 100%);
    pointer-events: none;
}

/* Micro-interactions */
.nav-btn::before,
.notification-btn::before,
.sound-btn::before,
.mobile-notification-btn::before,
.mobile-sound-btn::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 50%;
    transform: translate(-50%, -50%);
    transition: all 0.3s ease;
}

.nav-btn:hover::before,
.notification-btn:hover::before,
.sound-btn:hover::before,
.mobile-notification-btn:hover::before,
.mobile-sound-btn:hover::before {
    width: 100%;
    height: 100%;
}

/* Enhanced search animations */
.search-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(45deg, 
        transparent 30%, 
        rgba(0, 245, 255, 0.1) 50%, 
        transparent 70%);
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
}

.search-container.focused::before {
    opacity: 1;
}

/* Notification badge pulse */
.notification-badge,
.mobile-notification-badge {
    animation: badgePulse 2s ease-in-out infinite;
}

@keyframes badgePulse {
    0%, 100% {
        transform: scale(1);
        box-shadow: 0 2px 8px rgba(255, 71, 87, 0.4);
    }
    50% {
        transform: scale(1.05);
        box-shadow: 0 4px 16px rgba(255, 71, 87, 0.6);
    }
}