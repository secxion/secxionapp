import React, { useContext, useState, useMemo, useCallback, useEffect, useRef } from "react";
import { FcSearch } from "react-icons/fc";
import { Link, useLocation, useNavigate } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import { toast } from "react-toastify";
import { setUserDetails } from "../store/userSlice";
import Context from "../Context";
import { useSound } from "../Context/SoundContext";
import { useDebounce } from "../hooks/useDebounce";
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faBars, faSignOutAlt, faVolumeUp, faVolumeMute } from '@fortawesome/free-solid-svg-icons';
import { PiBell } from 'react-icons/pi';
import notificationSound from '../Assets/notification.mp3';
import ROLE from "../common/role";
import SummaryApi from "../common";
import { BiSearch } from 'react-icons/bi';
import SidePanel from "./SidePanel";
import './Header.css';
import './Pop.css';

const Header = () => {
    const dispatch = useDispatch();
    const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
    const [loading, setLoading] = useState(false);
    const { user } = useSelector((state) => state.user);
    const { soundEnabled, toggleSound } = useSound();
    const {token} = useContext(Context);
    const navigate = useNavigate();
    const searchInput = useLocation();
    const [unreadNotificationCount, setUnreadNotificationCount] = useState(0);
    const [showPopup, setShowPopup] = useState(false);
    const [popupMessage, setPopupMessage] = useState('');
    const [animateNotification, setAnimateNotification] = useState(false);
    const audioRef = useRef(null);
    const searchQuery = useMemo(() => {
    const URLSearch = new URLSearchParams(searchInput.search);
        return URLSearch.get("q") || "";
    }, [searchInput]);
    const [search, setSearch] = useState(searchQuery);
    const debouncedSearch = useDebounce(search, 300);

    // Notification Sound
    const playNotificationSound = () => {
        if (soundEnabled && audioRef.current) {
            audioRef.current.currentTime = 0;
            audioRef.current.play().catch(err => {
                console.warn("Notification sound failed:", err);
            });
        }
    };

    // Vibration
    const triggerVibration = () => {
        if (navigator.vibrate) {
            navigator.vibrate([100, 50, 100]);
        }
    };

    // Function to truncate words
    const truncateWords = (text, limit) => {
        const words = text.split(/\s+/);
        if (words.length > limit) {
            return {
                truncated: words.slice(0, limit).join(' ') + '...',
                original: text,
                isTruncated: true,
            };
        }
        return {
            truncated: text,
            original: text,
            isTruncated: false,
        };
    };

    // Fetch Unread Count
    const fetchUnreadCount = useCallback(async () => {
        if (user?._id) {
            try {
                const response = await fetch(SummaryApi.notificationCount.url, {
                    credentials: 'include',
                    headers: { 'Content-Type': 'application/json' },
                });
                const data = await response.json();
                if (data.success) {
                    setUnreadNotificationCount(data.count);
                }
            } catch (error) {
                console.error("❌ Error fetching unread count:", error);
            }
        }
    }, [user?._id]);

    // Fetch New Notifications
    const fetchNewNotifications = useCallback(async () => {
        if (user?._id) {
            try {
                const response = await fetch(SummaryApi.getNewNotifications.url, {
                    credentials: 'include',
                    headers: { 'Content-Type': 'application/json' }
                });
                const data = await response.json();
                if (data.success && Array.isArray(data.newNotifications)) {
                    const latest = data.newNotifications[0];
                    const lastShownId = localStorage.getItem('lastNotifiedId');
                    if (latest && latest._id !== lastShownId) {
                        localStorage.setItem('lastNotifiedId', latest._id);
                        setPopupMessage(latest.message || "New notification received!");
                        setShowPopup(true);
                        setAnimateNotification(true);
                        playNotificationSound();
                        triggerVibration();
                        // Reset animation
                        setTimeout(() => setAnimateNotification(false), 2000);
                        // Hide popup after 4 seconds
                        setTimeout(() => setShowPopup(false), 4000);
                    }
                }
            } catch (error) {
                console.error("❌ Error fetching new notifications:", error);
            }
        }
    }, [user?._id, playNotificationSound, triggerVibration]);

    useEffect(() => {
        if (debouncedSearch.trim()) {
            navigate(`/search?q=${encodeURIComponent(debouncedSearch)}`);
        }
    }, [debouncedSearch, navigate]);

    useEffect(() => {
        fetchUnreadCount();
        fetchNewNotifications();
        const unreadCountIntervalId = setInterval(fetchUnreadCount, 5000);
        const newNotificationsIntervalId = setInterval(fetchNewNotifications, 5000);
        return () => {
            clearInterval(unreadCountIntervalId);
            clearInterval(newNotificationsIntervalId);
        };
    }, [fetchUnreadCount, fetchNewNotifications]);

    const handleLogout = useCallback(async () => {
        setLoading(true);
        try {
            const response = await fetch(SummaryApi.logout_user.url, {
                method: SummaryApi.logout_user.method,
                credentials: "include",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`,
                },
            });
            const data = await response.json();
            if (data.success) {
                toast.success(data.message);
                dispatch(setUserDetails(null));
                navigate("/");
            } else {
                toast.error(data.message);
            }
        } catch (error) {
            toast.error("Logout failed. Please try again.");
        } finally {
            setLoading(false);
        }
    }, [dispatch, navigate, token]);

    const toggleMobileMenu = useCallback(() => setMobileMenuOpen((prev) => !prev), []);
    const closeMobileMenu = useCallback(() => setMobileMenuOpen(false), []);
    const truncatedMessage = useMemo(() => truncateWords(popupMessage, 10), [popupMessage]);

    useEffect(() => {
        console.log("Header soundEnabled:", soundEnabled);
    }, [soundEnabled]);

    return (
  <>
        <header className="fixed inset-x-0 top-0 z-50 w-full px-2 sm:px-6 lg:px-8 pt-14 pb-2 bg-black/80 backdrop-blur-md border-b border-white/20 shadow-xl transition-all duration-300">
        <div className="max-w-screen-xl mx-auto flex items-center justify-between">
        {/* Left: Menu Button + Logo */}
        <div className="flex items-center gap-4">
          {/* Mobile Menu Icon */}
          <button
            onClick={toggleMobileMenu}
            className="text-gray-400 hover:text-cyan-500 focus:outline-none md:hidden"
            aria-expanded={mobileMenuOpen}
          >
            <FontAwesomeIcon icon={faBars} className="h-5 w-5" />
          </button>

          {/* Logo */}
          <Link
            to="/home"
            className="hidden md:flex items-center text-2xl font-extrabold bg-gradient-to-r from-cyan-400 via-purple-500 to-pink-500 bg-clip-text text-transparent minecraft-font tracking-wide"
          >
            SXN
          </Link>
        </div>

        {/* Center: Search Input */}
        <div className="flex-1 mx-4 md:mx-8">
          {/* Desktop Search */}
          <div className="hidden md:flex items-center w-full bg-black border-2 glow-border rounded-md px-4 py-[6px] max-w-md mx-auto">
            <FcSearch className="h-5 w-5 mr-2 text-white" />
            <input
              type="text"
              placeholder="Search gift cards..."
              className="w-full bg-transparent text-white placeholder:text-gray-400 placeholder:text-xs text-sm minecraft-font outline-none"
              value={search}
              onChange={(e) => setSearch(e.target.value)}
            />
          </div>

          {/* Mobile Search */}
          <div className="md:hidden flex items-center bg-black border-2 glow-border rounded-md px-3 py-[6px]">
            <BiSearch className="h-5 w-5 mr-2 text-yellow-700" />
            <input
              type="text"
              placeholder="Search gift cards..."
              className="w-full bg-transparent text-white placeholder:text-gray-500 placeholder:text-xs text-sm minecraft-font outline-none"
              value={search}
              onChange={(e) => setSearch(e.target.value)}
            />
          </div>
        </div>

        {/* Right: Navigation + Tools */}
        <nav className="hidden md:flex items-center gap-2 minecraft-font text-[10px]">
          <Link
            to="/record"
            className="px-3 py-1 border border-cyan-500 text-cyan-400 hover:bg-cyan-600 hover:text-white rounded-md transition"
          >
            Trade Status
          </Link>

          <Link
            to="/datapad"
            className="px-3 py-1 border border-yellow-500 text-yellow-400 hover:bg-yellow-500 hover:text-black rounded-md transition"
          >
            DataPad
          </Link>

          {user?.role === ROLE.ADMIN && (
            <Link
              to="/admin-panel"
              className="px-3 py-1 border border-purple-500 text-purple-400 hover:bg-purple-700 hover:text-white rounded-md transition"
            >
              Admin
            </Link>
          )}

          <Link
            to="/notifications"
            className="relative px-3 py-1 border border-emerald-500 text-emerald-400 hover:bg-emerald-600 hover:text-white rounded-md transition"
          >
            <PiBell className={animateNotification ? 'animate-ping-slow text-xl' : 'text-xl'} />
            {unreadNotificationCount > 0 && (
              <span className="absolute -top-1 -right-1 bg-red-600 text-white text-[10px] px-1.5 py-0.5 rounded-full">
                {unreadNotificationCount}
              </span>
            )}
          </Link>

          {user?._id && (
            <button
              onClick={handleLogout}
              disabled={loading}
              className="px-3 py-1 border border-red-500 text-red-400 hover:bg-red-600 hover:text-white rounded-md transition flex items-center"
            >
              <FontAwesomeIcon icon={faSignOutAlt} className="mr-1" />
              Logout
            </button>
          )}

          {/* Sound Toggle */}
          <button
            onClick={toggleSound}
            title={soundEnabled ? "Disable Sound" : "Enable Sound"}
            className="px-3 py-1 border border-gray-500 text-gray-300 hover:bg-gray-700 hover:text-white rounded-md transition flex items-center"
          >
            <FontAwesomeIcon icon={soundEnabled ? faVolumeUp : faVolumeMute} className="mr-1" />
            <span className="hidden sm:inline">{soundEnabled ? "Sound On" : "Sound Off"}</span>
          </button>
        </nav>

        {/* Mobile Sound Icon */}
        <div className="md:hidden flex items-center ml-4">
          <button
            onClick={toggleSound}
            className="text-gray-400 hover:text-cyan-500"
            title={soundEnabled ? "Disable Sound" : "Enable Sound"}
          >
            <FontAwesomeIcon icon={soundEnabled ? faVolumeUp : faVolumeMute} className="h-5 w-5" />
          </button>
        </div>
      </div>

      {/* Pop Notification Alert */}
      {showPopup && (
        <div className="absolute top-full left-0 w-full bg-white text-black px-4 py-6 mt-2 shadow-lg animate-slide-in z-40 rounded-b-lg">
          <p className="text-sm font-semibold">{truncatedMessage.truncated}</p>
          {truncatedMessage.isTruncated && (
            <Link
              to="/notifications"
              className="text-blue-600 hover:underline text-xs block mt-1"
            >
              Read More
            </Link>
          )}
        </div>
      )}

      {/* Notification Sound */}
      <audio ref={audioRef} src={notificationSound} preload="auto" />

      {/* Side Drawer for Mobile Menu */}
      <SidePanel
        open={mobileMenuOpen}
        setOpen={setMobileMenuOpen}
        handleLogout={handleLogout}
        loading={loading}
        onCloseMenu={closeMobileMenu}
      />
    </header>
  </>
);

};

export default Header;