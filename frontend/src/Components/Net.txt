import userModel from "../../models/userModel.js";
import bcrypt from "bcryptjs";
import { v4 as uuidv4 } from "uuid";
import { sendVerificationEmail } from "../../utils/mailer.js";

async function userSignUpController(req, res) {
  try {
    const { email, password, name } = req.body;

    if (!email || !password || !name) {
      return res.status(400).json({
        success: false,
        message: "All fields (name, email, password) are required.",
      });
    }

    const userExists = await userModel.findOne({ email });
    if (userExists) {
      return res.status(409).json({
        success: false,
        message: "A user with this email already exists.",
      });
    }

    const hashPassword = bcrypt.hashSync(password, bcrypt.genSaltSync(10));
    const emailToken = uuidv4();

    const newUser = new userModel({
      name,
      email,
      password: hashPassword,
      role: "GENERAL",
      isVerified: false,
      emailToken,
    });

    await newUser.save();
    await sendVerificationEmail(email, emailToken);

    return res.status(201).json({
      success: true,
      message: "Account created! Please check your email to verify your account.",
    });
  } catch (err) {
    console.error("Signup error:", err);
    return res.status(500).json({
      success: false,
      message: err.message || "Signup failed due to a server error.",
    });
  }
}

export default userSignUpController;

//////////////////////


import bcrypt from 'bcryptjs';
import userModel from '../../models/userModel.js';
import jwt from 'jsonwebtoken';

async function userSignInController(req, res) {
    try {
        const { email, password } = req.body;

        if (!email) return res.status(400).json({ message: "Please provide email", error: true, success: false });
        if (!password) return res.status(400).json({ message: "Please provide password", error: true, success: false });

        const user = await userModel.findOne({ email }).select('+password'); // ensure password is selected

        if (!user) return res.status(404).json({ message: "User not found", error: true, success: false });

        const checkPassword = await bcrypt.compare(password, user.password);

        if (!checkPassword) {
            return res.status(401).json({ message: "Incorrect password", error: true, success: false });
        }

        const tokenData = {
            _id: user._id,
            email: user.email,
        };

        const token = jwt.sign(tokenData, process.env.TOKEN_SECRET_KEY, { expiresIn: 60 * 60 * 8 });

        const tokenOptions = {
            httpOnly: true,
            secure: true,
            sameSite: 'None',
            path: '/'
        };

        res.cookie("token", token, tokenOptions).status(200).json({
            message: "Login successful",
            data: {
                token,
                user: {
                    _id: user._id,
                    email: user.email,
                    name: user.name,
                    role: user.role,
                }
            },
            success: true,
            error: false
        });

    } catch (err) {
        res.status(500).json({
            message: err.message || "Internal server error",
            error: true,
            success: false
        });
    }
}

export default userSignInController;

