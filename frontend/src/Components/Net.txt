import React, { useEffect, useState } from "react";
import SummaryApi from "../common";

const AddBankAccountForm = () => {
  const [banks, setBanks] = useState([]);
  const [loadingBanks, setLoadingBanks] = useState(false);
  const [form, setForm] = useState({
    accountNumber: "",
    bankCode: "",
  });
  const [resolvedAccountName, setResolvedAccountName] = useState("");
  const [loadingResolve, setLoadingResolve] = useState(false);
  const [submitLoading, setSubmitLoading] = useState(false);
  const [error, setError] = useState("");
  const [successMsg, setSuccessMsg] = useState("");

  useEffect(() => {
    const fetchBanks = async () => {
      setLoadingBanks(true);
      setError("");
      try {
        const token = localStorage.getItem("token");
        const res = await fetch(SummaryApi.bankList.url, {
          method: "GET",
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        });
        const data = await res.json();
        if (!res.ok || !data.success) throw new Error(data.message || "Failed to load banks");
        setBanks(data.data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoadingBanks(false);
      }
    };

    fetchBanks();
  }, []);

  const handleChange = (e) => {
    setForm((prev) => ({ ...prev, [e.target.name]: e.target.value }));
    if (e.target.name === "accountNumber" || e.target.name === "bankCode") {
      setResolvedAccountName("");
    }
    setError("");
    setSuccessMsg("");
  };

  const handleResolve = async () => {
    if (!form.accountNumber || !form.bankCode) {
      setError("Account number and bank are required to resolve");
      return;
    }

    setLoadingResolve(true);
    setError("");
    setResolvedAccountName("");
    try {
      const res = await fetch(SummaryApi.resolveBankAccount.url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          account_number: form.accountNumber,
          bank_code: form.bankCode,
        }),
      });

      const data = await res.json();
      if (!res.ok || !data.success) throw new Error(data.message || "Failed to resolve account");

      setResolvedAccountName(data.data.account_name);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoadingResolve(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    setSuccessMsg("");

    if (!form.accountNumber || !form.bankCode) {
      setError("All fields are required");
      return;
    }
    if (!resolvedAccountName) {
      setError("Please resolve account before submitting");
      return;
    }

    const selectedBank = banks.find((b) => b.code === form.bankCode);
    if (!selectedBank) {
      setError("Invalid bank selected.");
      return;
    }

    setSubmitLoading(true);
    try {
      const token = localStorage.getItem("token");
      const res = await fetch(SummaryApi.addBankAccount.url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          accountNumber: form.accountNumber,
          bankName: selectedBank.name,      // ✅ full bank name
          bankCode: form.bankCode,          // ✅ bank code
          accountHolderName: resolvedAccountName, // ✅ resolved name
        }),
      });

      const data = await res.json();
      if (!res.ok || !data.success) throw new Error(data.message || "Failed to add bank account");

      setSuccessMsg("Bank account added successfully");
      setForm({ accountNumber: "", bankCode: "" });
      setResolvedAccountName("");
    } catch (err) {
      setError(err.message);
    } finally {
      setSubmitLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="max-w-md mx-auto p-4 border rounded">
      <h2 className="text-xl font-semibold mb-4">Add Bank Account</h2>

      {error && <p className="text-red-600 mb-2">{error}</p>}
      {successMsg && <p className="text-green-600 mb-2">{successMsg}</p>}

      <label className="block mb-2">
        Select Bank:
        {loadingBanks ? (
          <p>Loading banks...</p>
        ) : (
          <select
            name="bankCode"
            value={form.bankCode}
            onChange={handleChange}
            className="w-full border px-2 py-1"
            required
          >
            <option value="">-- Select Bank --</option>
            {banks.map((bank) => (
              <option key={bank.code} value={bank.code}>
                {bank.name}
              </option>
            ))}
          </select>
        )}
      </label>

      <label className="block mb-2">
        Account Number:
        <input
          type="text"
          name="accountNumber"
          value={form.accountNumber}
          onChange={handleChange}
          className="w-full border px-2 py-1"
          required
          maxLength={10}
        />
      </label>

      <button
        type="button"
        onClick={handleResolve}
        disabled={loadingResolve || !form.accountNumber || !form.bankCode}
        className="mb-4 px-4 py-2 bg-blue-600 text-white rounded disabled:bg-blue-300"
      >
        {loadingResolve ? "Resolving..." : "Resolve Account"}
      </button>

      {resolvedAccountName && (
        <p className="mb-4 text-green-700">Account Name: {resolvedAccountName}</p>
      )}

      <button
        type="submit"
        disabled={submitLoading}
        className="w-full py-2 bg-green-600 text-white rounded disabled:bg-green-300"
      >
        {submitLoading ? "Adding..." : "Add Bank Account"}
      </button>
    </form>
  );
};

export default AddBankAccountForm;
