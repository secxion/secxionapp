Hello chat gpt, thank you for assisting me in my current MERNstack e-commerce fintech project so far, in this session i actually wanted to implement ethereum payment method into my naira wallet before but now i think i have to do ethereum wallet separately
//
note: at eth balance update in naira to eth conversion we will use a public live exchange eth update to convert naira to eth .. any area we need conversion
using this below component please share complete ethereum wallet integrations including the controllers to fetch user wallet balance and convert it to ethereuem in ethereum balance, user withdrawal address input and so on that is necessary and relevant for a standard professional ethereum wallet integration and model too. plus frontend UI 
// i will upload the current helper and a controller from my project to help you indentify some crucial values used and structure of the project
and note : not building a blockchain node or wallet infrastructure — just connecting to a wallet/address.
fetch user naira balance from walletcontroller and convert to eth in eth wallet balance, i will paste walletcontrooler to know how to fetch user balance and convert and values that follows
.. note: Create or save ETH wallet address.

Fetch user wallet and ETH balance.

Withdraw ETH to another wallet address.
You'll use a custodial approach (users provide their wallet addresses; app doesn't manage private keys).

//
import Wallet from "../../models/walletModel.js";
import { createTransactionNotification } from "../notifications/notificationsController.js";


export const ensureWalletExists = async (userId) => {
  let wallet = await Wallet.findOne({ userId });
  if (!wallet) {
    wallet = new Wallet({ userId });
    await wallet.save();
  }
  return wallet;
};

export const getWalletBalance = async (req, res) => {
  try {
    const userId = req.userId;
    const wallet = await ensureWalletExists(userId);

    res.status(200).json({
      success: true,
      balance: wallet.balance,
    });
  } catch (error) {
    console.error('Error fetching wallet balance:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to fetch wallet balance',
      error: error.message,
    });
  }
};

export const getOtherUserWalletBalance = async (req, res) => {
  try {
    const userId = req.params.userId;
    const wallet = await Wallet.findOne({ userId });

    if (!wallet) {
      return res.status(404).json({ success: false, message: 'Wallet not found for this user.' });
    }

    res.status(200).json({ success: true, balance: wallet.balance });
  } catch (error) {
    console.error('Error fetching user wallet balance:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to fetch user wallet balance',
      error: error.message,
    });
  }
};


export const updateWalletBalance = async (userId, amount, type, description, referenceId, onModel) => {
  try {
    const wallet = await ensureWalletExists(userId);

    if (amount < 0) {
      if (Math.abs(amount) < 1000) {
        return {
          success: false,
          message: "Minimum withdrawal amount is ₦1000.",
        };
      }
      if (wallet.balance + amount < 0) {
        return {
          success: false,
          message: "Insufficient balance. Cannot go below ₦0.",
        };
      }
    }

    wallet.balance += amount;

    wallet.transactions.push({
      type,
      amount,
      description,
      referenceId,
      onModel,
    });

    await wallet.save();

    const formattedAmount = `₦${Math.abs(amount).toLocaleString()}`;
    const message =
      type === 'credit'
        ? `Your wallet has been credited with ${formattedAmount}`
        : type === 'debit'
        ? `Your wallet has been debited by ${formattedAmount}`
        : `A wallet transaction of ${formattedAmount} occurred`;

    await createTransactionNotification(
      userId,
      Math.abs(amount),
      type,
      message,
      '/wallet',
      referenceId
    );

    return {
      success: true,
      message: "Wallet updated successfully.",
      newBalance: wallet.balance,
    };
  } catch (error) {
    console.error('Error updating wallet balance:', error);
    return {
      success: false,
      message: "Failed to update wallet balance.",
      error: error.message,
    };
  }
};


//
ok now let us create the backend and frontend tools for a standard prefoessional eth wallet integration