// HistoryCard.jsx
import React, { useState } from "react";
import HistoryDetailView from './HistoryDetailView';

const HistoryCard = ({ data }) => { // Removed isDetailViewOpen, onCloseDetailView as HistoryCard manages its own modal now
    const [showDetailView, setShowDetailView] = useState(false);

    const initialStatus = data.status || 'WAIT';

    // The onClick for the card will now open the detail view
    const handleCardClick = () => {
        setShowDetailView(true);
    };

    const renderStatusIndicator = (status) => {
        switch (status) {
            case 'PROCESSING':
                return (
                    <div className="flex items-center">
                        <div className="animate-spin h-5 w-5 border-4 border-blue-500 rounded-full border-t-transparent mr-2"></div>
                        <span className="text-yellow-500 glossy-text">PROCESSING</span>
                    </div>
                );
            case 'DONE':
                return <span className="text-green-500 glossy-text">üëç‚ú® DONE</span>;
            case 'CANCEL':
                return <span className="text-red-500 glossy-text">üëé CANCEL</span>;
            case 'WAIT':
                return (
                    <div className="flex items-center">
                        <div className="animate-pulse h-5 w-5 mr-2">
                            <svg className="h-full w-full text-gray-500" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M12 2C10.34 2 9 3.34 9 5v6H7c-1.66 0-3 1.34-3 3s1.34 3 3 3h2v6c0 1.66 1.34 3 3 3s3-1.34 3-3v-6h2c1.66 0 3-1.34 3-3s-1.34-3-3-3h-2V5c0-1.66-1.34-3-3-3z" />
                            </svg>
                        </div>
                        <span className="text-gray-500 glossy-text">‚è≥ WAIT</span>
                    </div>
                );
            default:
                return null;
        }
    };

    return (
        <>
            <div
                className='bg-white p-6 rounded-xl shadow-lg border-2 border-black transition-transform transform hover:scale-105 hover:border-4 hover:border-gray-700 duration-300 cursor-pointer'
                onClick={handleCardClick} // Use local click handler to open the modal
            >
                <div className='w-full'>
                    <p className="text-green-500 font-semibold glossy-text">
                        Market ID: <span className='text-green-700 truncate block glossy-text'>{data._id}</span>
                    </p>
                    <p className="text-blue-500 text-sm mt-1 glossy-text">
                        Created At: <span className='truncate block glossy-text'>{data.timestamp ? new Date(data.timestamp).toLocaleString() : "N/A"}</span>
                    </p>
                    <p className="text-blue-500 text-sm mt-1 glossy-text">
                        Status: <span className='truncate block'>{renderStatusIndicator(initialStatus)}</span>
                    </p>
                    {initialStatus === 'CANCEL' && (
                        <p className="text-red-600 text-sm mt-1 glossy-text">
                            Cancel Reason: <span className='truncate block glossy-text'>{data.cancelReason || 'N/A'}</span>
                        </p>
                    )}
                    {/* The View More button can stay, but it will also trigger the same modal open */}
                    <button
                        onClick={handleCardClick} // Click the button to open the modal
                        className="mt-4 bg-blue-600 text-white p-2 rounded-lg hover:bg-blue-700 transition duration-200 w-full glossy-heading"
                    >
                        View More
                    </button>
                </div>
            </div>

            {showDetailView && (
                <div className="fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50">
                    <div className="relative bg-white w-full max-w-2xl rounded-2xl shadow-2xl border-4 border-black"
                         style={{ maxHeight: '85vh', overflowY: 'auto' }}>
                        <HistoryDetailView
                            productDetails={{
                                ...data,
                                // Ensure all necessary details are passed
                                crImage: data.crImage || null,
                                cancelReason: data.cancelReason || "",
                                productName: data.productName || "",
                                pricing: data.pricing || [],
                                description: data.description || ""
                            }}
                            onClose={() => setShowDetailView(false)}
                        />
                    </div>
                </div>
            )}
        </>
    );
};

export default HistoryCard;

// HistoryDetailView.jsx
import React, { useState } from 'react';
import { CgClose } from "react-icons/cg";
import DisplayImage from './DisplayImage';
// Removed unused imports: toast, SummaryApi

const HistoryDetailView = ({
    onClose = () => {},
    productDetails = {},
}) => {
    // No need for a separate 'data' state here if you're just displaying props
    // const [data] = useState({ ...productDetails, crImage: productDetails?.crImage || "" });

    const [openFullScreenImage, setOpenFullScreenImage] = useState(false);
    const [fullScreenImage, setFullScreenImage] = useState("");
    const [openFullScreenCrImage, setOpenFullScreenCrImage] = useState(false);

    // Removed handleSubmit function as this component is for viewing details

    return (
        <div className="bg-white p-6 rounded-2xl w-full max-w-2xl shadow-lg border-4 border-black" // Bold black border
             style={{ maxHeight: '85vh', overflowY: 'auto' }}>

            <div className="flex justify-between items-center mb-6 border-b border-gray-200 pb-4">
                <h2 className="font-extrabold text-2xl text-gray-800 glossy-heading">Details</h2>
                <button className="text-2xl text-gray-500 hover:text-red-600 cursor-pointer" onClick={onClose} aria-label="Close details">
                    <CgClose />
                </button>
            </div>

            {productDetails && (
                <>
                    <h1 className='text-blue-600 p-2 font-semibold -mt-4 mb-4 glossy-text'>
                        Request ID: {productDetails._id}
                    </h1>
                    <div className="border border-gray-300 rounded-lg p-4 bg-white shadow-inner mb-6">
                        <div className="flex items-start gap-4">
                            {productDetails?.productImage?.[0] && (
                                <img
                                    src={productDetails.productImage[0]}
                                    alt="Product"
                                    className="w-24 h-24 object-cover rounded-lg border border-gray-200 flex-shrink-0"
                                    loading="lazy"
                                />
                            )}
                            <div>
                                <h3 className="font-bold text-gray-800 text-lg glossy-heading">{productDetails.productName}</h3>
                                <p className="text-gray-600 glossy-text">Currency: {productDetails.pricing?.[0]?.currency || 'N/A'}</p>
                                <p className="text-gray-600 glossy-text">Face Value: {productDetails.pricing?.[0]?.faceValues?.[0]?.faceValue || 'N/A'}</p>
                                <p className="text-gray-600 glossy-text">Rate: {productDetails.pricing?.[0]?.faceValues?.[0]?.sellingPrice || 'N/A'}</p>
                            </div>
                        </div>
                        {productDetails.description && (
                            <p className="text-gray-700 mt-4 glossy-text">{productDetails.description}</p>
                        )}
                    </div>
                </>
            )}

            <div className="space-y-4">
                <div>
                    <label className="block font-medium text-gray-700 mb-2 glossy-text">Images:</label>
                    <div className="flex gap-2 mt-2 flex-wrap">
                        {productDetails?.Image?.length > 0 ? (
                            productDetails.Image.map((el, index) => (
                                <div className="relative group" key={index}>
                                    <img
                                        src={el}
                                        alt={`product-${index}`}
                                        className="w-20 h-20 object-cover rounded-lg border border-gray-300 cursor-pointer"
                                        onClick={() => {
                                            setOpenFullScreenImage(true);
                                            setFullScreenImage(el);
                                        }}
                                        loading="lazy"
                                    />
                                </div>
                            ))
                        ) : (
                            <p className="text-red-600 text-sm glossy-text">*No images uploaded for this record.</p>
                        )}
                    </div>
                </div>

                <div>
                    <label htmlFor="totalAmount" className="block font-medium text-gray-700 mb-2 glossy-text">Total FaceValue:</label>
                    <div className='text-gray-900 glossy-text'>{productDetails.totalAmount || 'N/A'}</div>
                </div>
                <div>
                    <label htmlFor="calculatedTotalAmount" className="block font-medium text-gray-700 mb-2 glossy-text">Total Amount:</label>
                    <div className='text-gray-900 glossy-text'>{productDetails.calculatedTotalAmount || 'N/A'}</div>
                </div>
                <div>
                    <label htmlFor="userRemark" className="block font-medium text-gray-700 mb-2 glossy-text">Remarks:</label>
                    <div className='text-gray-900 glossy-text'>{productDetails.userRemark || 'N/A'}</div>
                </div>

                {productDetails.crImage && (
                    <div>
                        <label className="block font-medium text-gray-700 mb-2 glossy-text">Cancel Reason Image:</label>
                        <img
                            src={productDetails.crImage}
                            alt="Cancel Reason"
                            className="w-20 h-20 object-cover rounded-lg border border-gray-300 cursor-pointer"
                            onClick={() => {
                                setOpenFullScreenCrImage(true);
                                setFullScreenImage(productDetails.crImage);
                            }}
                            loading="lazy"
                        />
                    </div>
                )}

                <div>
                    <label className="block font-medium text-gray-700 mb-2 glossy-text">Status:</label>
                    <div className='text-gray-900 font-semibold glossy-text'>{productDetails.status || 'N/A'}</div>
                </div>

                {productDetails.status === "CANCEL" && ( // Check for "CANCEL" as per original logic
                    <div>
                        <label className="block font-medium text-gray-700 mb-2 glossy-text">Cancel Reason:</label>
                        <div className='text-red-700 font-medium glossy-text'>{productDetails.cancelReason || 'No reason provided.'}</div>
                    </div>
                )}
            </div>

            {openFullScreenImage && (
                <DisplayImage
                    onClose={() => setOpenFullScreenImage(false)}
                    imgUrl={fullScreenImage}
                />
            )}

            {openFullScreenCrImage && (
                <DisplayImage
                    onClose={() => setOpenFullScreenCrImage(false)}
                    imgUrl={fullScreenImage}
                />
            )}
        </div>
    );
};

export default HistoryDetailView;


=====================================================


// HistoryCard.jsx
import React, { useCallback, useState } from 'react';
import { useNavigate } from 'react-router-dom';

const HistoryCard = ({
    data,
    isDetailViewOpen,
    onCloseDetailView,
    cardClassName, // Prop for the main card div
    textClassName, // Prop for general text elements
    headingClassName // Prop for heading elements
}) => {
    const navigate = useNavigate();
    const [isHovered, setIsHovered] = useState(false);

    // Placeholder for opening detail view (if needed, otherwise can remove)
    const handleOpenDetailView = useCallback(() => {
        // This component doesn't directly open the modal, UserMarket does.
        // But if you intend for clicking the card to navigate or open a direct detail view,
        // you would add that logic here. For now, it just navigates to a specific market ID.
        if (data?._id) {
            navigate(`/user-market/${data._id}`);
        }
    }, [data?._id, navigate]);

    const statusColors = {
        "WAIT": "bg-yellow-100 text-yellow-800",
        "COMPLETED": "bg-green-100 text-green-800",
        "CANCELLED": "bg-red-100 text-red-800",
        "PENDING": "bg-blue-100 text-blue-800",
        "APPROVED": "bg-purple-100 text-purple-800",
    };

    const statusText = {
        "WAIT": "Awaiting Approval",
        "COMPLETED": "Completed",
        "CANCELLED": "Cancelled",
        "PENDING": "Pending Payment",
        "APPROVED": "Approved",
    };

    return (
        // Applied cardClassName for styling and hover effects from UserMarket
        <div
            className={`relative rounded-xl p-4 cursor-pointer transition-all duration-300 ${cardClassName}`}
            onClick={handleOpenDetailView}
            onMouseEnter={() => setIsHovered(true)}
            onMouseLeave={() => setIsHovered(false)}
        >
            {/* Glossy Text Styles (Repeated for self-containment if component used elsewhere, otherwise can rely on parent) */}
            <style>{`
                .glossy-text {
                    text-shadow:
                        -1px -1px 0 #fff,
                        1px -1px 0 #fff,
                        -1px 1px 0 #fff,
                        1px 1px 0 #fff,
                        2px 2px 5px rgba(0,0,0,0.5);
                    -webkit-text-stroke: 0.5px #000;
                    color: #000;
                }
                .glossy-heading {
                    text-shadow:
                        0 0 5px rgba(255,255,255,0.7),
                        0 0 10px rgba(255,255,255,0.5),
                        2px 2px 5px rgba(0,0,0,0.3);
                    -webkit-text-stroke: 0.7px #333;
                    color: #000;
                }
            `}</style>

            {/* Product Image */}
            {data?.productImage?.[0] && (
                <img
                    src={data.productImage[0]}
                    alt={data.productName}
                    className="w-full h-32 object-cover rounded-lg mb-4 border border-gray-300"
                    loading="lazy"
                />
            )}

            {/* Product Details */}
            <h3 className={`font-bold text-gray-800 text-lg mb-2 ${headingClassName}`}> {/* Applied headingClassName */}
                {data.productName}
            </h3>
            <p className={`text-gray-700 text-sm mb-1 ${textClassName}`}> {/* Applied textClassName */}
                **Face Value:** {data.totalAmount}
            </p>
            <p className={`text-gray-700 text-sm mb-1 ${textClassName}`}> {/* Applied textClassName */}
                **Amount:** ${data.calculatedTotalAmount}
            </p>
            <p className={`text-gray-700 text-sm mb-1 ${textClassName}`}> {/* Applied textClassName */}
                **Date:** {new Date(data.createdAt).toLocaleDateString()}
            </p>

            {/* Status Badge */}
            <div className={`mt-3 px-3 py-1 rounded-full text-xs font-semibold inline-flex items-center justify-center ${statusColors[data.status]} ${textClassName}`}> {/* Applied textClassName */}
                <span className="mr-1">‚óè</span> {statusText[data.status] || data.status}
            </div>

            {/* Detail View Indicator (Optional, if you want a visual cue for clickability) */}
            {isHovered && (
                <div className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-10 rounded-xl">
                    <span className="text-white font-bold glossy-text">View Details</span>
                </div>
            )}
        </div>
    );
};

export default HistoryCard;


import React, { useState } from 'react';
import { CgClose } from "react-icons/cg";
import DisplayImage from './DisplayImage';
import { toast } from 'react-toastify';
import SummaryApi from '../common';

const HistoryDetailView = ({
  onClose = () => {},
  fetchData = () => {},
  productDetails = {},
}) => {
  const [data] = useState({
    _id: productDetails?._id || "",
    Image: productDetails?.Image || [],
    totalAmount: productDetails?.totalAmount || "",
    calculatedTotalAmount: productDetails?.calculatedTotalAmount || "",
    userRemark: productDetails?.userRemark || "",
    crImage: productDetails?.crImage || "", 
    status: productDetails?.status || "WAIT",
    cancelReason: productDetails?.cancelReason || "",
  });

  const [openFullScreenImage, setOpenFullScreenImage] = useState(false);
  const [fullScreenImage, setFullScreenImage] = useState("");
  const [openFullScreenCrImage, setOpenFullScreenCrImage] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      const response = await fetch(SummaryApi.marketRecord.url, {
        method: SummaryApi.marketRecord.method,
        credentials: 'include',
        headers: {
          "content-type": "application/json",
        },
        body: JSON.stringify(data),
      });

      const responseData = await response.json();

      if (responseData.success) {
        toast.success(responseData.message);
        onClose();
        fetchData();
      } else {
        toast.error(responseData.message || "An error occurred.");
      }
    } catch (error) {
      toast.error("Failed to update record.");
    }
  };

  return (
    <div className=" fixed inset-0 flex items-start justify-center bg-gray-800 bg-opacity-50 p-4 z-50">
  <div className="bg-white p-6 rounded-2xl w-full max-w-2xl shadow-lg mt-10"
       style={{ maxHeight: '85vh', overflowY: 'auto' }}>

        <div className="flex justify-between items-center mb-6">
          <h2 className="font-extrabold text-2xl text-gray-800">Details</h2>
          <button className="text-2xl text-gray-500 hover:text-red-600 cursor-pointer" onClick={onClose}>
            <CgClose />
          </button>
        </div>

        {productDetails && (
           <><h1 className='text-blue-600 p-4 font-semibold -mt-6 gap-3 space-y-4'>{productDetails._id}</h1>
           <div className="border overflow-x-hidden rounded-lg p-4 bg-gray-50 shadow-inner mb-6">            <div className="flex items-center gap-4">
              {productDetails?.productImage?.[0] && (
                <img
                  src={productDetails.productImage[0]}
                  alt="Product"
                  className="w-24 h-24 object-cover rounded-lg border" />
              )}
              <div>
                <h3 className="font-bold text-gray-800 text-lg">{productDetails.productName}</h3>
                <p className="text-gray-600">Currency: {productDetails.pricing?.[0]?.currency || 'N/A'}</p>
                <p className="text-gray-600">Face Value: {productDetails.pricing?.[0]?.faceValues?.[0]?.faceValue || 'N/A'}</p>
                <p className="text-gray-600">Rate: {productDetails.pricing?.[0]?.faceValues?.[0]?.sellingPrice || 'N/A'}</p>
              </div>
            </div>
            {productDetails.description && (
              <p className="text-gray-600 mt-4">{productDetails.description}</p>
            )}
          </div></>
        )}

        <form className="space-y-6" onSubmit={handleSubmit}>
          <div>
            <label className="block font-medium text-gray-700 mb-2">Images:</label>           
            <div className="flex gap-2 mt-4 flex-wrap">
              {data?.Image.length > 0 ? (
                data.Image.map((el, index) => (
                  <div className="relative group" key={index}>
                    <img
                      src={el}
                      alt={`product-${index}`}
                      className="w-20 h-20 object-cover rounded-lg border cursor-pointer "
                      onClick={() => {
                        setOpenFullScreenImage(true);
                        setFullScreenImage(el);
                      }}
                    />
                  </div>
                ))
              ) : (
                <p className="text-red-600 text-sm">*No image uploaded</p>
              )}
            </div>
          </div>

          <div>
            <label htmlFor="totalAmount" className="block font-medium text-gray-700 mb-2">Total FaceValue:</label>
            <div className='text-gray-900'>{productDetails.totalAmount}</div>
          </div>
          <div>
            <label htmlFor="calculatedTotalAmount" className="block font-medium text-gray-700 mb-2">Total Amount:</label>
            <div className='text-gray-900'>{productDetails.calculatedTotalAmount}</div>
          </div>
          <div>
            <label htmlFor="userRemark" className="block font-medium text-gray-700 mb-2">Remarks:</label>
            <div className='text-gray-900'>{productDetails.userRemark}</div>
          </div>

          {productDetails.crImage && (
            <div>
              <label className="block font-medium text-gray-700 mb-2">Cancel Reason Image:</label>
              <img 
                src={productDetails.crImage} 
                alt="Cancel Reason" 
                className="w-20 h-20 object-cover rounded-lg border cursor-pointer" 
                onClick={() => {
                  setOpenFullScreenCrImage(true);
                  setFullScreenImage(productDetails.crImage);
                }} 
              />
            </div>
          )}

          <div>
            <label className="block font-medium text-gray-700 mb-2">Status:</label>
            <div className='text-gray-900'>{data.status || 'N/A'}</div>
          </div>

          {data.status === "CANCELLED" && (
            <div>
              <label className="block font-medium text-gray-700 mb-2">Cancel Reason:</label>
              <div className='text-red-900'>{data.cancelReason || 'N/A'}</div>
            </div>
          )}
        </form>
      </div>

      {openFullScreenImage && (
        <DisplayImage
          onClose={() => setOpenFullScreenImage(false)}
          imgUrl={fullScreenImage}
        />
      )}

      {openFullScreenCrImage && (
        <DisplayImage
          onClose={() => setOpenFullScreenCrImage(false)}
          imgUrl={fullScreenImage}
        />
      )}
    </div>
  );
};

export default HistoryDetailView;






import React, { useState } from 'react';

import { CgClose } from "react-icons/cg";

import DisplayImage from './DisplayImage';

import { toast } from 'react-toastify';

import SummaryApi from '../common';



const HistoryDetailView = ({

  onClose = () => {},

  fetchData = () => {},

  productDetails = {},

}) => {

  const [data] = useState({

    _id: productDetails?._id || "",

    Image: productDetails?.Image || [],

    totalAmount: productDetails?.totalAmount || "",

    calculatedTotalAmount: productDetails?.calculatedTotalAmount || "",

    userRemark: productDetails?.userRemark || "",

    crImage: productDetails?.crImage || "", 

    status: productDetails?.status || "WAIT",

    cancelReason: productDetails?.cancelReason || "",

  });



  const [openFullScreenImage, setOpenFullScreenImage] = useState(false);

  const [fullScreenImage, setFullScreenImage] = useState("");

  const [openFullScreenCrImage, setOpenFullScreenCrImage] = useState(false);



  const handleSubmit = async (e) => {

    e.preventDefault();



    try {

      const response = await fetch(SummaryApi.marketRecord.url, {

        method: SummaryApi.marketRecord.method,

        credentials: 'include',

        headers: {

          "content-type": "application/json",

        },

        body: JSON.stringify(data),

      });



      const responseData = await response.json();



      if (responseData.success) {

        toast.success(responseData.message);

        onClose();

        fetchData();

      } else {

        toast.error(responseData.message || "An error occurred.");

      }

    } catch (error) {

      toast.error("Failed to update record.");

    }

  };



  return (

    <div className=" fixed inset-0 flex items-start justify-center bg-gray-800 bg-opacity-50 p-4 z-50">

  <div className="bg-white p-6 rounded-2xl w-full max-w-2xl shadow-lg mt-10"

       style={{ maxHeight: '85vh', overflowY: 'auto' }}>



        <div className="flex justify-between items-center mb-6">

          <h2 className="font-extrabold text-2xl text-gray-800">Details</h2>

          <button className="text-2xl text-gray-500 hover:text-red-600 cursor-pointer" onClick={onClose}>

            <CgClose />

          </button>

        </div>



        {productDetails && (

           <><h1 className='text-blue-600 p-4 font-semibold -mt-6 gap-3 space-y-4'>{productDetails._id}</h1>

           <div className="border overflow-x-hidden rounded-lg p-4 bg-gray-50 shadow-inner mb-6">            <div className="flex items-center gap-4">

              {productDetails?.productImage?.[0] && (

                <img

                  src={productDetails.productImage[0]}

                  alt="Product"

                  className="w-24 h-24 object-cover rounded-lg border" />

              )}

              <div>

                <h3 className="font-bold text-gray-800 text-lg">{productDetails.productName}</h3>

                <p className="text-gray-600">Currency: {productDetails.pricing?.[0]?.currency || 'N/A'}</p>

                <p className="text-gray-600">Face Value: {productDetails.pricing?.[0]?.faceValues?.[0]?.faceValue || 'N/A'}</p>

                <p className="text-gray-600">Rate: {productDetails.pricing?.[0]?.faceValues?.[0]?.sellingPrice || 'N/A'}</p>

              </div>

            </div>

            {productDetails.description && (

              <p className="text-gray-600 mt-4">{productDetails.description}</p>

            )}

          </div></>

        )}



        <form className="space-y-6" onSubmit={handleSubmit}>

          <div>

            <label className="block font-medium text-gray-700 mb-2">Images:</label>           

            <div className="flex gap-2 mt-4 flex-wrap">

              {data?.Image.length > 0 ? (

                data.Image.map((el, index) => (

                  <div className="relative group" key={index}>

                    <img

                      src={el}

                      alt={`product-${index}`}

                      className="w-20 h-20 object-cover rounded-lg border cursor-pointer "

                      onClick={() => {

                        setOpenFullScreenImage(true);

                        setFullScreenImage(el);

                      }}

                    />

                  </div>

                ))

              ) : (

                <p className="text-red-600 text-sm">*No image uploaded</p>

              )}

            </div>

          </div>



          <div>

            <label htmlFor="totalAmount" className="block font-medium text-gray-700 mb-2">Total FaceValue:</label>

            <div className='text-gray-900'>{productDetails.totalAmount}</div>

          </div>

          <div>

            <label htmlFor="calculatedTotalAmount" className="block font-medium text-gray-700 mb-2">Total Amount:</label>

            <div className='text-gray-900'>{productDetails.calculatedTotalAmount}</div>

          </div>

          <div>

            <label htmlFor="userRemark" className="block font-medium text-gray-700 mb-2">Remarks:</label>

            <div className='text-gray-900'>{productDetails.userRemark}</div>

          </div>



          {productDetails.crImage && (

            <div>

              <label className="block font-medium text-gray-700 mb-2">Cancel Reason Image:</label>

              <img 

                src={productDetails.crImage} 

                alt="Cancel Reason" 

                className="w-20 h-20 object-cover rounded-lg border cursor-pointer" 

                onClick={() => {

                  setOpenFullScreenCrImage(true);

                  setFullScreenImage(productDetails.crImage);

                }} 

              />

            </div>

          )}



          <div>

            <label className="block font-medium text-gray-700 mb-2">Status:</label>

            <div className='text-gray-900'>{data.status || 'N/A'}</div>

          </div>



          {data.status === "CANCELLED" && (

            <div>

              <label className="block font-medium text-gray-700 mb-2">Cancel Reason:</label>

              <div className='text-red-900'>{data.cancelReason || 'N/A'}</div>

            </div>

          )}

        </form>

      </div>



      {openFullScreenImage && (

        <DisplayImage

          onClose={() => setOpenFullScreenImage(false)}

          imgUrl={fullScreenImage}

        />

      )}



      {openFullScreenCrImage && (

        <DisplayImage

          onClose={() => setOpenFullScreenCrImage(false)}

          imgUrl={fullScreenImage}

        />

      )}

    </div>

  );

};



export default HistoryDetailView;
