const express = require('express');
const cors = require('cors');
const cookieParser = require('cookie-parser');
require('dotenv').config();
const connectDB = require('./config/db');
const router = require('./routes');
const app = express();
const mongoose = require('mongoose'); // Import mongoose

const allowedOrigins = [
    process.env.FRONTEND_URL,
    'https://secxion.onrender.com',
    "https://secxionx.onrender.com",
];

const corsOptions = {
    origin: (origin, callback) => {
        if (allowedOrigins.includes(origin) || !origin) {
            callback(null, true);
        } else {
            callback(new Error('Not allowed by CORS'));
        }
    },
    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
    credentials: true,
    allowedHeaders: 'Content-Type, Authorization',
};

app.use(cors(corsOptions));
app.use(express.json());
app.use(cookieParser());

// New route to set cookie on every request to '/'
app.use('/api', (req, res, next) => {
    console.log("index.js: Received request to /");
    const token = "test_token";
    const tokenOption = {
        httpOnly: true,
        secure: true,
        path: '/',
        maxAge: 60 * 60 * 8 * 1000,
    };
    res.cookie("token", token, tokenOption);
    console.log("index.js: Cookie 'token' set with options:", tokenOption);
    next(); // Pass control to the next middleware or route handler
});

app.use("/api", router);

const PORT = process.env.PORT || 5000;

connectDB()
    .then(async () => { // Made connectDB async to handle the connection object
        const db = mongoose.connection; // Get the connection object
        console.log("index.js: Connected to MongoDB at:", db.host, db.port, db.name); // Log db info

        app.listen(PORT, () => {
            console.log("Connected to MongoDB");
            console.log("index.js: Server is running on port", PORT);
            console.log("index.js: Allowed CORS origins:", allowedOrigins);
        });
    })
    .catch((error) => {
        console.error("index.js: Error connecting to MongoDB:", error);
        process.exit(1);
    });

